# This is a template. In production, use Kubernetes secrets management or external secret operators
apiVersion: v1
kind: Secret
metadata:
  name: aia-secrets
  namespace: aia-system
type: Opaque
stringData:
  database-url: "postgresql://aia_user:CHANGE_ME@postgres:5432/aia_production"
  redis-url: "redis://:CHANGE_ME@redis:6379/0"
  mongodb-url: "mongodb://admin:CHANGE_ME@mongodb:27017/"
  neo4j-password: "CHANGE_ME"
  secret-key: "CHANGE_ME_GENERATE_SECURE_KEY"
  jwt-secret-key: "CHANGE_ME_GENERATE_SECURE_KEY"
  encryption-key: "CHANGE_ME_GENERATE_SECURE_KEY"
  # LLM API Keys
  openai-api-key: "sk-CHANGE_ME"
  anthropic-api-key: "sk-ant-CHANGE_ME"
  google-api-key: "CHANGE_ME"
  groq-api-key: "gsk_CHANGE_ME"
  huggingface-token: "hf_CHANGE_ME"
  # AWS Credentials
  aws-access-key-id: "CHANGE_ME"
  aws-secret-access-key: "CHANGE_ME"
  # Azure Credentials
  azure-openai-api-key: "CHANGE_ME"
  azure-openai-endpoint: "https://CHANGE_ME.openai.azure.com/"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aia-api
  namespace: aia-system
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/aia-api-role  # For AWS EKS
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: aia-api-role
  namespace: aia-system
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aia-api-rolebinding
  namespace: aia-system
subjects:
- kind: ServiceAccount
  name: aia-api
  namespace: aia-system
roleRef:
  kind: Role
  name: aia-api-role
  apiGroup: rbac.authorization.k8s.io