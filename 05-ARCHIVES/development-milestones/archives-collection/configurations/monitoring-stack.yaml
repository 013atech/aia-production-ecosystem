---
# Comprehensive Cloud Operations monitoring for 013a Analytics
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-config
  namespace: analytics-platform
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    scrape_configs:
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'aia-analytics-backend'
        static_configs:
        - targets: ['aia-analytics-backend:8000']
        metrics_path: /metrics
        scrape_interval: 10s

      - job_name: 'aia-analytics-ml-engine'
        static_configs:
        - targets: ['aia-analytics-ml-engine:8001']
        metrics_path: /metrics
        scrape_interval: 15s

      - job_name: 'aia-analytics-frontend'
        static_configs:
        - targets: ['aia-analytics-frontend:3000']
        metrics_path: /metrics
        scrape_interval: 30s

      - job_name: 'postgres-exporter'
        static_configs:
        - targets: ['postgres-exporter:9187']
        scrape_interval: 30s

      - job_name: 'redis-exporter'
        static_configs:
        - targets: ['redis-exporter:9121']
        scrape_interval: 30s

---
# PostgreSQL Exporter for Database Metrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: analytics-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-exporter
  template:
    metadata:
      labels:
        app: postgres-exporter
    spec:
      containers:
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        ports:
        - containerPort: 9187
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://analytics_user:analytics_pass@aia-analytics-postgres:5432/analytics_db?sslmode=disable"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter
  namespace: analytics-platform
spec:
  selector:
    app: postgres-exporter
  ports:
  - port: 9187
    targetPort: 9187

---
# Redis Exporter for Cache Metrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-exporter
  namespace: analytics-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-exporter
  template:
    metadata:
      labels:
        app: redis-exporter
    spec:
      containers:
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
        env:
        - name: REDIS_ADDR
          value: "redis://aia-analytics-redis:6379"
        resources:
          requests:
            memory: "64Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: redis-exporter
  namespace: analytics-platform
spec:
  selector:
    app: redis-exporter
  ports:
  - port: 9121
    targetPort: 9121

---
# Grafana Dashboard for Visualization
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: analytics-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-kubernetes-app"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/provisioning
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: grafana-config
        configMap:
          name: grafana-config

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: analytics-platform
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: LoadBalancer

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: analytics-platform
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Google Cloud Monitoring
      type: stackdriver
      access: proxy
      jsonData:
        authenticationType: gce
        defaultProject: aia-system-prod-1759055445
    - name: Cloud Logging
      type: google-cloud-logging-datasource
      access: proxy
      jsonData:
        authenticationType: gce
        defaultProject: aia-system-prod-1759055445

---
# Cloud Operations Integration
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-ops-sa
  namespace: analytics-platform
  annotations:
    iam.gke.io/gcp-service-account: cloud-ops@aia-system-prod-1759055445.iam.gserviceaccount.com

---
# Fluent Bit for Enhanced Logging
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  namespace: analytics-platform
spec:
  selector:
    matchLabels:
      app: fluent-bit
  template:
    metadata:
      labels:
        app: fluent-bit
    spec:
      serviceAccountName: cloud-ops-sa
      containers:
      - name: fluent-bit
        image: fluent/fluent-bit:latest
        ports:
        - containerPort: 24224
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: analytics-platform
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Log_Level     info
        Daemon        off
        Parsers_File  parsers.conf

    [INPUT]
        Name              tail
        Path              /var/log/containers/aia-analytics-*.log
        Parser            docker
        Tag               kube.*
        Refresh_Interval  5
        Mem_Buf_Limit     50MB
        Skip_Long_Lines   On

    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     kube.var.log.containers.
        Merge_Log           On
        Keep_Log            Off
        K8S-Logging.Parser  On
        K8S-Logging.Exclude On

    [OUTPUT]
        Name  stackdriver
        Match *
        google_service_credentials /var/secrets/google/key.json
        project_id aia-system-prod-1759055445
        location us-central1-a
        namespace_id analytics-platform
        resource k8s_container

  parsers.conf: |
    [PARSER]
        Name   docker
        Format json
        Time_Key time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep On

---
# Alert Manager for Incident Response
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: analytics-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      containers:
      - name: alertmanager
        image: prom/alertmanager:latest
        ports:
        - containerPort: 9093
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        args:
        - --config.file=/etc/alertmanager/alertmanager.yml
        - --storage.path=/alertmanager
        - --web.external-url=http://alertmanager.analytics-platform:9093
      volumes:
      - name: alertmanager-config
        configMap:
          name: alertmanager-config

---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: analytics-platform
spec:
  selector:
    app: alertmanager
  ports:
  - port: 9093
    targetPort: 9093

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: analytics-platform
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'alerts@013a.tech'
      smtp_auth_username: 'alerts@013a.tech'
      smtp_auth_password: 'your-app-password'

    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: web.hook

    receivers:
    - name: 'web.hook'
      email_configs:
      - to: 'ops@013a.tech'
        subject: 'AIA Analytics Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Details:
          {{ range .Labels.SortedPairs }}â¢ {{ .Name }}: {{ .Value }}
          {{ end }}
          {{ end }}

---
# Prometheus Rules for Alerting
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: analytics-platform
data:
  alert_rules.yml: |
    groups:
    - name: aia-analytics-alerts
      rules:
      - alert: HighCPUUsage
        expr: (100 - (avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)) > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage detected"
          description: "CPU usage is above 80% for more than 5 minutes"

      - alert: HighMemoryUsage
        expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 85
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage detected"
          description: "Memory usage is above 85% for more than 5 minutes"

      - alert: PodCrashLooping
        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Pod is crash looping"
          description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is restarting frequently"

      - alert: ServiceDown
        expr: up == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Service is down"
          description: "Service {{ $labels.job }} has been down for more than 1 minute"

      - alert: DatabaseConnectionsFull
        expr: pg_stat_activity_count > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Database connections approaching limit"
          description: "PostgreSQL has more than 80 active connections"