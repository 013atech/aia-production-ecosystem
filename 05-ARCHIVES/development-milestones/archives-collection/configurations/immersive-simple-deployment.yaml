# SIMPLIFIED IMMERSIVE 3D DEPLOYMENT - PRODUCTION READY
# Optimized for immediate health check and gradual build
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-immersive-frontend
  namespace: immersive-analytics
  labels:
    app: simple-immersive-frontend
    version: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: simple-immersive-frontend
  template:
    metadata:
      labels:
        app: simple-immersive-frontend
        version: production
    spec:
      containers:
      - name: immersive-nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: html-content
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: nginx-config
        configMap:
          name: simple-immersive-nginx-config
      - name: html-content
        configMap:
          name: simple-immersive-html
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: simple-immersive-nginx-config
  namespace: immersive-analytics
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location / {
            try_files $uri $uri/ /index.html;
        }

        location /api/ {
            proxy_pass http://aia-backend-fixed-service.aia-working-production.svc.cluster.local/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin "*";
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: simple-immersive-html
  namespace: immersive-analytics
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="theme-color" content="#1E1E1E" />
        <meta name="description" content="013a Analytics - Immersive 3D Data Experience" />
        <title>013a Analytics - Immersive Experience</title>
        <script src="https://unpkg.com/three@0.158.0/build/three.min.js"></script>
        <style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          body {
            background: linear-gradient(135deg, #0A0A0A 0%, #1E1E1E 100%);
            font-family: 'Inter', -apple-system, sans-serif;
            overflow: hidden;
            color: #F5F5DC;
          }

          #container {
            width: 100vw;
            height: 100vh;
            position: relative;
          }

          #ui {
            position: absolute;
            top: 20px;
            left: 20px;
            right: 20px;
            z-index: 1000;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(30, 30, 30, 0.8);
            backdrop-filter: blur(20px);
            border-radius: 40px;
            padding: 12px 24px;
            border: 1px solid #00FFFF40;
          }

          .logo {
            color: #F5F5DC;
            font-size: 20px;
            font-weight: 600;
          }

          .status {
            display: flex;
            gap: 12px;
            align-items: center;
          }

          .badge {
            background: rgba(0, 255, 255, 0.2);
            color: #F5F5DC;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
          }

          #loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            z-index: 500;
          }

          .spinner {
            width: 80px;
            height: 80px;
            border: 4px solid #00FFFF40;
            border-top: 4px solid #00FFFF;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 32px;
          }

          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }

          #info {
            position: absolute;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
            background: rgba(30, 30, 30, 0.9);
            backdrop-filter: blur(20px);
            border: 1px solid #FFFF0040;
            border-radius: 20px;
            padding: 20px;
            max-width: 400px;
          }

          .button {
            width: 100%;
            background: linear-gradient(135deg, #00FFFF 0%, #FFFF00 100%);
            color: #1E1E1E;
            border: none;
            border-radius: 25px;
            padding: 12px;
            font-weight: 600;
            cursor: pointer;
            font-size: 14px;
            margin-top: 16px;
          }

          .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 255, 255, 0.3);
          }
        </style>
      </head>
      <body>
        <div id="container">
          <div id="ui">
            <div class="logo">013a Analytics</div>
            <div class="status">
              <div class="badge">2,472 atoms</div>
              <div class="badge">WebXR Ready</div>
            </div>
          </div>

          <div id="loading">
            <div class="spinner"></div>
            <h2 style="font-weight: 300; margin-bottom: 16px;">Initializing Sentient Canvas...</h2>
            <p style="opacity: 0.8;">Loading immersive 3D experience</p>
          </div>

          <div id="info">
            <h3 style="margin-bottom: 12px;">Immersive Analytics Experience</h3>
            <p style="opacity: 0.8; font-size: 14px; line-height: 1.5; margin-bottom: 16px;">
              Experience the future of data analysis with our 3D immersive platform.
              Interact with live data streams and explore analytics in VR/AR.
            </p>
            <button class="button" onclick="window.open('https://013a.tech', '_blank')">
              Enter Full Analytics Platform
            </button>
          </div>
        </div>

        <script>
          // Initialize Three.js scene
          const scene = new THREE.Scene();
          const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
          const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });

          renderer.setSize(window.innerWidth, window.innerHeight);
          renderer.setClearColor(0x000000, 0);
          document.getElementById('container').appendChild(renderer.domElement);

          // Create knowledge atoms
          const particles = new THREE.BufferGeometry();
          const particleCount = 2472;
          const positions = new Float32Array(particleCount * 3);
          const colors = new Float32Array(particleCount * 3);

          for (let i = 0; i < particleCount; i++) {
            const radius = 15 + Math.random() * 25;
            const theta = Math.random() * Math.PI * 2;
            const phi = Math.acos(2 * Math.random() - 1);

            positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);
            positions[i * 3 + 1] = radius * Math.cos(phi);
            positions[i * 3 + 2] = radius * Math.sin(phi) * Math.sin(theta);

            const gradient = i / particleCount;
            colors[i * 3] = gradient;
            colors[i * 3 + 1] = 1;
            colors[i * 3 + 2] = 1 - gradient;
          }

          particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));
          particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));

          const material = new THREE.PointsMaterial({
            size: 0.05,
            sizeAttenuation: true,
            vertexColors: true,
            transparent: true,
            opacity: 0.8,
            blending: THREE.AdditiveBlending
          });

          const knowledgeField = new THREE.Points(particles, material);
          scene.add(knowledgeField);

          // Add central core
          const coreGeometry = new THREE.BoxGeometry(3, 3, 3);
          const coreMaterial = new THREE.MeshBasicMaterial({
            color: 0x00FFFF,
            transparent: true,
            opacity: 0.8
          });
          const core = new THREE.Mesh(coreGeometry, coreMaterial);
          core.position.y = 2;
          scene.add(core);

          // Add agents
          const agentPositions = [
            [-8, 2, 0], [-4, 4, -2], [0, 3, 0], [4, 2, 2], [8, 4, -1]
          ];
          const agentColors = [0x00FFFF, 0xFF00FF, 0xFFFF00, 0x00FF00, 0xFF8000];

          agentPositions.forEach((pos, i) => {
            const agentGeometry = new THREE.SphereGeometry(0.8, 32, 32);
            const agentMaterial = new THREE.MeshBasicMaterial({
              color: agentColors[i],
              transparent: true,
              opacity: 0.7
            });
            const agent = new THREE.Mesh(agentGeometry, agentMaterial);
            agent.position.set(pos[0], pos[1], pos[2]);
            scene.add(agent);
          });

          camera.position.set(0, 5, 15);

          // Animation loop
          let time = 0;
          function animate() {
            requestAnimationFrame(animate);

            time += 0.01;

            knowledgeField.rotation.y += 0.001;
            knowledgeField.position.y = Math.sin(time * 0.5) * 0.5;

            core.rotation.x = Math.sin(time * 0.5) * 0.1;
            core.rotation.y += 0.01;
            core.rotation.z = Math.sin(time * 0.3) * 0.05;

            renderer.render(scene, camera);
          }

          // Handle resize
          window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
          });

          // Remove loading screen after initialization
          setTimeout(() => {
            document.getElementById('loading').style.display = 'none';
          }, 3000);

          animate();

          // Check backend connectivity
          setInterval(async () => {
            try {
              const response = await fetch('/api/health');
              const badge = document.querySelector('.badge');
              if (response.ok) {
                badge.style.background = 'rgba(0, 255, 0, 0.2)';
              } else {
                badge.style.background = 'rgba(255, 165, 0, 0.2)';
              }
            } catch (error) {
              console.log('Backend check failed:', error);
            }
          }, 10000);
        </script>
      </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: simple-immersive-service
  namespace: immersive-analytics
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
spec:
  selector:
    app: simple-immersive-frontend
  ports:
  - name: http
    port: 80
    targetPort: 80
  type: ClusterIP